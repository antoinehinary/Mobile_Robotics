import numpy as np

class KalmanFilter(object):
    def __init__(self, dim_x, dim_z, dim_u=0):
        self.dim_x = dim_x
        self.dim_z = dim_z
        self.dim_u = dim_u

        self.A = np.eye(dim_x)  # state transition matrix
        self.Q = np.eye(dim_x)  # process uncertainty
        self.H = np.zeros((dim_z, dim_x))  # measurement matrix
        self.R = np.eye(dim_z)  # measurement uncertainty

        self.x_est = np.zeros((dim_x, 1))  # state estimate
        self.P_est = np.eye(dim_x) * 1000  # state covariance estimate
        self.speed_conv_factor = 1  # conversion factor for speed
        
    def predict(self, speed, orientation):
        # Prediction through the a priori estimate
        self.x_est = np.dot(self.A, self.x_est)
        self.P_est = np.dot(np.dot(self.A, self.P_est), self.A.T) + self.Q

        # Update based on the measured speed and orientation
        self.H = np.array([[1, 0, 0, 0],
                           [0, 0, 1, 0]])  # Update measurement matrix
        self.R = np.array([[0.25]])  # Update measurement uncertainty

        # Convert orientation to a direction vector
        direction = np.array(orientation).reshape((-1, 1))

        # Measurement vector based on speed and orientation
        y = np.dot(self.H, self.x_est) + np.dot(direction, speed * self.speed_conv_factor)

        # Innovation / measurement residual
        i = y - np.dot(self.H, self.x_est)

        # Measurement prediction covariance
        S = np.dot(self.H, np.dot(self.P_est, self.H.T)) + self.R

        # Kalman gain
        K = np.dot(self.P_est, np.dot(self.H.T, np.linalg.inv(S)))

        # A posteriori estimate
        self.x_est = self.x_est + np.dot(K, i)
        self.P_est = self.P_est - np.dot(K, np.dot(self.H, self.P_est))

        # Extracting relevant information for the output
        estimated_position = self.x_est[:2].flatten()
        estimated_speed = np.linalg.norm(self.x_est[2:])
        estimated_direction = direction.flatten()

        return estimated_position, estimated_speed, estimated_direction, self.x_est, self.P_est


initial_condition = np.array([[0], [0],[0],[0]])
initial_orientation = np.array([[1], [0]])  # Example: facing in the x-direction
initial_covariance = np.eye(4) * 1000

kf = KalmanFilter(dim_x=4, dim_z=1)

# Initialize Kalman filter with the provided initial values
kf.x_est = initial_condition
kf.P_est = initial_covariance

num_time_steps = 40


# Perform prediction and update for each time step (assuming constant speed and orientation)
for _ in range(num_time_steps):
    estimated_position, estimated_speed, estimated_direction, _, _ = kf.predict(speed=1, orientation=[1, 0])
    print("Estimated Position:", estimated_position)
    print("Estimated Speed:", estimated_speed)
    print("Estimated Direction:", estimated_direction)
    print("------")
